
#include <iostream>
#include <conio.h>

using namespace std;

int *Deykstra(int **GR, int V, int st);//Алгоритм пошуку найкоротшого шляху 
void input(int** arr, int n);//Створення матриці інцедентності
void output(int arr, int v);//Виведення обчислених даних

int main()
{
	setlocale(LC_ALL, "ukr");
	int n;//Кількість міст
	cout << "Введiть кiлькiсть мiст(>1, <100): ";
	cin >> n;//Введення кількості міст
	if (n < 1 || n>100)//Переавірка на правельність введених даних
	{
		while (true)
		{
			cout << "Некоректне введення. Спробуйте ще раз." << endl;
			cout << "Введіть кількість міст(>1, <100): ";
			cin >> n;
			if (!(n < 1 || n>100))
				break;
		}
	}
	cout << "Введiть столицю: ";
	int k;
	cin >> k;
	int **mat = new int*[n];//Виділення динамічної пам'яті під матрицю інцидентності
	for (int i = 0; i < n; i++)
		mat[i] = new int[n];
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			mat[i][j] = 0;
	input(mat, n);
	int **arr = new int*[n]; // Виділення динамічної пам'яті під отримані дані про маршрути
	for (int i = 0; i < n; i++)
		arr[i] = new int[n];
	for (int i = 0; i < n; i++)//Проходимо по всіх містах	
	{
		if (i != k - 1)
		{
			arr[i] = Deykstra(mat, n, i);//Виклик функції пошуку маршруту для вказаної вершини
			output(arr[i][k-1], i);//Виведення отриманих даних
		}
	}
	//Видалення використовуваної динамічноъ пам'яті
	for (int i = 0; i < n; i++)
		delete[] mat[i];
	delete[] mat;
	for (int i = 0; i < n; i++)
		delete[] arr[i];
	delete[] arr;
	system("pause");
	return 0;
}

int *Deykstra(int **mat, int n, int v)
{
	int *d;//Відстані до міст
	bool *vis;//масив ідентифікаторів відвідувань міста
	int index;
	d = new int[n];
	vis = new bool[n];
	for (int i = 0; i<n; i++)
	{
		d[i] = INT_MAX;//Відстань до міст псевдобескінечна
		vis[i] = false; //Всі міста позначені як невідвідувані
	}
	d[v] = 0;//Відстань до поточного міста 0
	for (int k = 0; k < n - 1; k++) //Проходимо решту міст
	{
		int min = INT_MAX;
		for (int i = 0; i < n; i++)//Вибираємо вершину, яку ще не відвідували, але пов'язана з відвідуваною
			if (!vis[i] && d[i] <= min)
			{
				min = d[i];
				index = i;
			}
		int u = index;//Запам'ятовуємо індекс вибраної вершини
		vis[u] = true;//позначаємо її як відвідувану
		for (int i = 0; i < n; i++)//проходимо по всім вершинам
			if (!vis[i] && mat[u][i] && d[u] != INT_MAX &&
				d[u] + mat[u][i]<d[i])//Якщо вершина сусідня і відтань до неї від початку менша ніж вказана в неї
				d[i] = d[u] + mat[u][i];//присвоюємо дану відстань
	}
	return d;//Присвоюємо функції масив відстаней
}

void input(int** arr, int n)
{
	int i, j, t;

	while (true)
	{
		cout << "Введiть початок дороги: ";
		cin >> i;//ввести початкову вершину дороги
		if (i - 1 < 0 || i - 1 > n-1)//Переавірка на правельність введених даних
		{
			while (true)
			{
				cout << "Некоректне введення. Спробуйте ще раз." << endl;
				cout << "Введiть початок дороги: ";
				cin >> i;
				if (!(i - 1 < 0 || i - 1 > n-1))
					break;
			}
		}
		cout << "Введiть кiнець дороги: ";
		cin >> j;//ввести кінцеву вершину дороги
		if (j - 1 < 0 || j - 1 > n-1)//Переавірка на правельність введених даних
		{
			while (true)
			{
				cout << "Некоректне введення. Спробуйте ще раз." << endl;
				cout << "Введiть кiнець дороги: ";
				cin >> j;
				if (!(j - 1 < 0 || j - 1 > n-1))
					break;
			}
		}
		cout << "Введiть час на данiй дорозi: ";
		cin >> t;//Ввести час на даній дорозі
		if (t<0)//Переавірка на правельність введених даних
		{
			while (true)
			{
				cout << "Некоректне введення. Спробуйте ще раз." << endl;
				cout << "Введiть час на данiй дорозi: ";
				cin >> t;
				if (!(t<0))
					break;
			}
		}
		if(i!=j)
			arr[i-1][j-1] = arr[j-1][i-1] = t;//Записати час на даній дорозі в матрицю суміжності
		cout << "Кiнець-ESC\n" << "Далi-Enter\n";
		int a = _getch();;
		if (a == 27) break;//виxоимо з циклу введення, якщо коистувач це захотів
	}	
}

void output(int arr, int v)
{
	cout << "Час прибуття школяра з " << v + 1 << " мiста в столицю: " << arr << endl;//Вивести час прибуття школяра в столицю
}